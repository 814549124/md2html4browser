// Generated by CoffeeScript 1.10.0
var Marked;

Marked = null;

(function() {
  var m_instance;
  m_instance = null;
  return Marked = function() {
    var ol_list_reg, title1_reg, title2_reg, title3_reg, title4_reg, title5_reg, title6_reg, ul_list_reg;
    if (m_instance) {
      return m_instance;
    }
    title1_reg = /^#\s+(.*)/g;
    title2_reg = /^#{2}\s+(.*)/g;
    title3_reg = /^#{3}\s+(.*)/g;
    title4_reg = /^#{4}\s+(.*)/g;
    title5_reg = /^#{5}\s+(.*)/g;
    title6_reg = /^#{6}\s+(.*)/g;
    ul_list_reg = /^[\*,+,-]\s+(.*)/g;
    ol_list_reg = /^\d+\s+(.*)/g;
    return m_instance = function(content) {
      var block, block_reg, blocks, code_reg, code_seg, html, i, j, k, l, len, len1, len2, m, o, objs, paragraph_reg, r, re, row1, row_len, row_reg, rows, total_html, v;
      total_html = '';
      block_reg = /(?:\r?\n){2,}/mg;
      row_reg = /\r?\n/g;
      title1_reg = /^#\s+(.*)/g;
      title2_reg = /^#{2}\s+(.*)/g;
      title3_reg = /^#{3}\s+(.*)/g;
      title4_reg = /^#{4}\s+(.*)/g;
      title5_reg = /^#{5}\s+(.*)/g;
      title6_reg = /^#{6}\s+(.*)/g;
      ul_list_reg = /^[\*,+,-]\s+(.*)/g;
      ol_list_reg = /^\d+\s+(.*)/g;
      paragraph_reg = /^\w|^[\u4e00-\u9fa5]/g;
      code_reg = /```(\w*)\s*\r?\n([\s\S]*?)```/mg;
      code_seg = [];
      i = 0;
      while (null !== (re = code_reg.exec(content))) {
        code_seg.push("<pre><code class='lang-" + re[1] + "'>\r\n" + re[2] + "\r\n</code></pre>");
        content = content.replace(re[0], "\x00\x01\x02" + i);
        i++;
      }
      blocks = content.split(block_reg);
      for (j = 0, len = blocks.length; j < len; j++) {
        block = blocks[j];
        objs = [];
        html = '';
        block = block.replace(/\*{2}(.+?)\*{2}/g, '<strong>$1</strong>');
        block = block.replace(/\*(.+?)\*/g, '<em>$1</em>');
        block = block.replace(/!\[(.+?)\](\[(.*?)\])?(\((.+?)\))?/g, '<img src="$5" id="$3" alt="$1">');
        block = block.replace(/\[(.+?)\](\[(.*?)\])?\((.+?)\)/g, '<a href="$4" id="$3">$1</a>');
        block = block.replace(/\[(.+?)\]\[(.*?)\]/g, '<a href="#$2">$1</a>');
        row_reg.lastIndex = 0;
        rows = block.split(row_reg);
        row_len = rows.length;
        row1 = rows[0];
        paragraph_reg.lastIndex = 0;
        switch (true) {
          case paragraph_reg.test(row1):
            if (!/^\d+\s+/.test(row1)) {
              block = block.replace(/\r?\n$/g, '');
              block = block.replace(/\r?\n/g, '<br>');
              row_reg.lastIndex = 0;
              rows = block.split(row_reg);
            }
        }
        for (l = 0, len1 = rows.length; l < len1; l++) {
          r = rows[l];
          title1_reg.lastIndex = 0;
          title2_reg.lastIndex = 0;
          title3_reg.lastIndex = 0;
          title4_reg.lastIndex = 0;
          title5_reg.lastIndex = 0;
          title6_reg.lastIndex = 0;
          ul_list_reg.lastIndex = 0;
          ol_list_reg.lastIndex = 0;
          if (r === '') {
            continue;
          }
          switch (true) {
            case title1_reg.test(r):
              title1_reg.lastIndex = 0;
              re = title1_reg.exec(r);
              objs.push({
                type: 'h1',
                content: re[1]
              });
              break;
            case title2_reg.test(r):
              title2_reg.lastIndex = 0;
              re = title2_reg.exec(r);
              objs.push({
                type: 'h2',
                content: re[1]
              });
              break;
            case title3_reg.test(r):
              title3_reg.lastIndex = 0;
              re = title3_reg.exec(r);
              objs.push({
                type: 'h3',
                content: re[1]
              });
              break;
            case title4_reg.test(r):
              title4_reg.lastIndex = 0;
              re = title4_reg.exec(r);
              objs.push({
                type: 'h4',
                content: re[1]
              });
              break;
            case title5_reg.test(r):
              title5_reg.lastIndex = 0;
              re = title5_reg.exec(r);
              objs.push({
                type: 'h5',
                content: re[1]
              });
              break;
            case title6_reg.test(r):
              title6_reg.lastIndex = 0;
              re = title6_reg.exec(r);
              objs.push({
                type: 'h6',
                content: re[1]
              });
              break;
            case ul_list_reg.test(r):
              ul_list_reg.lastIndex = 0;
              re = ul_list_reg.exec(r);
              objs.push({
                type: 'li',
                content: re[1]
              });
              break;
            case ol_list_reg.test(r):
              ol_list_reg.lastIndex = 0;
              re = ol_list_reg.exec(r);
              objs.push({
                type: 'li',
                content: re[1]
              });
              break;
            default:
              objs.push({
                type: 'p',
                content: r
              });
          }
        }
        for (m = 0, len2 = objs.length; m < len2; m++) {
          o = objs[m];
          switch (o.type) {
            case 'h1':
              html += "<h1>" + o.content + "</h1>";
              break;
            case 'h2':
              html += "<h2>" + o.content + "</h2>";
              break;
            case 'h3':
              html += "<h3>" + o.content + "</h3>";
              break;
            case 'h4':
              html += "<h4>" + o.content + "</h4>";
              break;
            case 'h5':
              html += "<h5>" + o.content + "</h5>";
              break;
            case 'h6':
              html += "<h6>" + o.content + "</h6>";
              break;
            case 'li':
              html += "<li>" + o.content + "</li>";
              break;
            case 'p':
              html += "<p>" + o.content + "</p>";
              break;
            default:
              html += o.content;
          }
        }
        ul_list_reg.lastIndex = 0;
        ol_list_reg.lastIndex = 0;
        switch (true) {
          case ul_list_reg.test(row1):
            html = "<ul>" + html + "</ul>";
            break;
          case ol_list_reg.test(row1):
            html = "<ol>" + html + "</ol>";
        }
        total_html += html;
      }
      for (k in code_seg) {
        v = code_seg[k];
        total_html = total_html.replace("\x00\x01\x02" + k, v);
      }
      return total_html;
    };
  };
})();
